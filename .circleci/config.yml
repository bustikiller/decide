version: 2
jobs:
  test:
    working_directory: ~/decide
    parallelism: 1
    shell: /bin/bash --login
    docker:
      - image: circleci/ruby:3.1.-node-browsers
        environment:
          RAILS_ENV: test
          RACK_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: postgres
      - image: circleci/postgres:9.6-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: decide_test
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "Gemfile.lock" }}
            - v1-dep-bundle-
      - run: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
      - save_cache:
          key: v1-dep-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          command: bundle exec rspec --color --format documentation --require spec_helper --require rails_helper spec
          environment:
            RAILS_GROUPS: assets
      - store_artifacts:
          path: coverage
          prefix: tests
  cypress:
    working_directory: ~/decide
    parallelism: 1
    shell: /bin/bash --login
    docker:
      - image: circleci/ruby:3.1.0-node-browsers
        environment:
          RAILS_ENV: development
          RACK_ENV: development
          PGHOST: 127.0.0.1
          PGUSER: postgres
      - image: circleci/postgres:9.6-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: decide_development
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis:6-alpine
    steps:
      - checkout
      - run: npm install
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "Gemfile.lock" }}
            - v1-dep-bundle-
      - run: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
      - save_cache:
          key: v1-dep-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run: bundle exec rake db:reset
      - run:
          name: Rails server
          command: bundle exec rails s
          background: true
      - run: sleep 5 ; npm run cy:run:recorded
  zaproxy:
    working_directory: ~/decide
    parallelism: 1
    shell: /bin/bash --login
    machine:
      image: ubuntu-2004:202107-01
    steps:
      - checkout
      - run: npm install
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "Gemfile.lock" }}
            - v1-dep-bundle-
      - run:
          name: Install native dependencies
          command: |
            sudo apt update && \
            sudo apt-get install libpq-dev && \
            sudo ln -s /usr/lib/x86_64-linux-gnu/libffi.so.7 /usr/lib/x86_64-linux-gnu/libffi.so.6
      - run:
          name: Install ruby dependencies
          command: |
            cd ~/decide && \
            rvm use && \
            bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
      - save_cache:
          key: v1-dep-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Rails server
          command: |
            cd ~/decide && \
            rvm use && \
            docker run -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -d -p 5432:5432 postgres:9.6 && \
            export POSTGRES_USER=postgres POSTGRES_PASSWORD=postgres POSTGRES_HOST=localhost && \
            bundle exec rake db:reset && \
            bundle exec rails s
          background: true
      - run:
          name: ZAP full scan of application
          command: |
            cd ~/decide && \
            chmod -R 777 .zap && \
            docker pull owasp/zap2docker-weekly && \
            docker run --network host -v $(pwd)/.zap:/zap/wrk/:rw -v $(pwd)/.zap/custom_policy.policy:/home/zap/.ZAP_D/policies/Default\ Policy.policy:rw -t owasp/zap2docker-weekly zap-full-scan.py \
                -m 5 \
                -n decide_localhost.context \
                -U admin_edm@example.com \
                -r report.html \
                -d \
                -t http://localhost:3000/ || \
            if [ $? -ne 1 ]; then exit 0; else exit 1; fi;
      - store_artifacts:
          path: .zap/report.html
  build:
    docker:
      - image: circleci/ruby:3.1.0-node-browsers
    steps:
      - checkout
      - run:
          name: Setup VirtualEnv
          command: |
            echo 'export TAG=${CIRCLE_BRANCH}' >> $BASH_ENV
            echo 'export IMAGE_NAME=decide' >> $BASH_ENV 
            echo 'export ORG_NAME=exploradoresdemadrid' >> $BASH_ENV 
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - run:
          name: Build & push to DockerHub 
          command: |
            docker build -t $ORG_NAME/$IMAGE_NAME:$TAG .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $ORG_NAME/$IMAGE_NAME:$TAG
  deploy:
    docker:
      - image: ictu/sshpass
    steps:
      - run:
          name: Deploy to server 
          command: |
            sshpass -p $SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_ADDRESS "cd /home/ubuntu/deployments/scripts && ./deploy-prod.sh"
workflows:
  version: 2
  build:
    jobs:
      - test
      - cypress
      - build:
          filters:
            branches:
              only:
                - master
                - unify-docker
      - deploy:
          requires:
            - build
            - test
            - cypress
          filters:
            branches:
              only:
                - master
  daily_check:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - zaproxy